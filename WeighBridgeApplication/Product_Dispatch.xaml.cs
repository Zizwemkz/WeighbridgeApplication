using DevExpress.Xpf.Editors;
using DevExpress.Xpf.LayoutControl;
using DevExpress.Xpo;
using RapidCMv1.Module.BusinessObjects.RapidCMV1_Master;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace WeighBridgeApplication
{
    /// <summary>
    /// Interaction logic for Product_Dispatch.xaml
    /// </summary>
    public partial class Product_Dispatch : Page
    {
        public Product_Dispatch()
        {
            DataContext = new Contact
            {
                FirstName = "Carolyn",
                LastName = "Baker",
                Email = "carolyn.baker@example.com",
                Phone = "(555)349-3010",
                Address = "1198 Theresa Cir",
                City = "Whitinsville",
                State = "MA",
                Zip = "01582",
            };
            InitializeComponent();
            //updatelookupedit();
            PopulateSupplierCombobox();
        }
        
	string connectionString = @"XpoProvider=MSSqlServer;data source=*;user id=sa;password=*;initial catalog=*;Persist Security Info=true";

        public void updatelookupedit()
        {
            var inMemoryDAL = XpoDefault.GetDataLayer(connectionString, DevExpress.Xpo.DB.AutoCreateOption.DatabaseAndSchema);
            try
            {
                using (var uow = new UnitOfWork(inMemoryDAL))
                {
                    XPServerCollectionSource col = new XPServerCollectionSource(uow, typeof(Order_OrderIn));
                    //col.DisplayableProperties = "ProductID.Name;";
                   ////var col = new XPCollection<Order_OrderIn>(uow);
                    //Lookupedit.ItemsSource = col;
                    
                    //Combobox.ItemsSource = col;
                    //new XPCollection<Order_OrderIn>(uow);//.Select(i => new { OrderNo = i.OrderNo, Product=i.ProductID.Name});
                    //OrderLookup.ValueMember = "ID";
                    //dxGrid1.ItemsSource = new XPCollection<Library_Product>(uow);

                }
            }
            catch (Exception ex)
            {
                var msg = ex.Message;
            }
            
        }



        public void PopulateSupplierCombobox()
        {
            var inMemoryDAL = XpoDefault.GetDataLayer(connectionString, DevExpress.Xpo.DB.AutoCreateOption.DatabaseAndSchema);
            try
            {
                using (var uow = new UnitOfWork(inMemoryDAL))
                {
                    XPCollection<Order_OrderIn> Library_TruckTypes = new XPCollection<Order_OrderIn>(uow);
                    var list = Library_TruckTypes.Select(x => x.OrderNo).ToList();
                    List<string> itemsList = new List<string>();
                    foreach (string item in list.Distinct())
                    {
                        //Combobox.Items.Add(item);
                        itemsList.Add(item);
                    }
                    //Lookupedit.ItemsSource = list;
                }
            }
            catch (Exception ex)
            {
                var msg = ex.Message;
            }
        }
        private void OnDataLayoutControlAutoGeneratingItem(object sender, DataLayoutControlAutoGeneratingItemEventArgs e)
        {
            if (e.PropertyName == "Id")
                e.Cancel = true;
            if (e.PropertyName.ToLower().Contains("phone"))
            {
                var editor = new ButtonEdit() { Mask = "(000)000-0000", MaskType = MaskType.Simple };
                editor.SetBinding(BaseEdit.EditValueProperty, new Binding(e.PropertyName));
                e.Item.Content = editor;
            }
        }
        private void OnDataLayoutControlAutoGeneratedGroup(object sender, DataLayoutControlAutoGeneratedGroupEventArgs e)
        {
            e.Group.View = LayoutGroupView.Group;
        }

    }
    public class Contact
    {
        public int Id { get; set; }
        [Display(GroupName = "General")]
        public string FirstName { get; set; }
        [Display(GroupName = "General")]
        public string LastName { get; set; }
        [Display(GroupName = "Contacts")]
        public string Email { get; set; }
        [Display(GroupName = "Contacts")]
        public string Phone { get; set; }
        [Display(GroupName = "Address")]
        public string Address { get; set; }
        [Display(GroupName = "Address")]
        public string City { get; set; }
        [Display(GroupName = "Address")]
        public string State { get; set; }
        [Display(GroupName = "Address")]
        public string Zip { get; set; }
    }
}
